{
  "version": 3,
  "sources": ["src/app/shared/sliding-overlay/sliding-overlay.component.ts", "src/app/shared/sliding-overlay/sliding-overlay.component.html", "src/app/machines/components/entry-form/entry-form.component.ts", "src/app/machines/components/entry-form/entry-form.component.html", "src/app/machines/components/entries-table/entries-table.component.ts", "src/app/machines/components/entries-table/entries-table.component.html"],
  "sourcesContent": ["import { CommonModule } from '@angular/common';\nimport { Component, EventEmitter, Output } from '@angular/core';\n\n@Component({\n  selector: 'oee-sliding-overlay',\n  standalone: true,\n  imports: [\n    CommonModule\n  ],\n  templateUrl: './sliding-overlay.component.html',\n  styleUrl: './sliding-overlay.component.scss'\n})\nexport class SlidingOverlayComponent {\n  @Output() close = new EventEmitter<void>();\n\n  show = false;\n\n  slideIn() {\n    this.show = true;\n  }\n\n  slideOut() {\n    this.show = false;\n    this.close.emit();\n  }\n}\n", "<div [class.show]=\"show\" class=\"sliding-overlay-container\">\n  <div class=\"overlay-backdrop\" (click)=\"slideOut()\"></div>\n  <div class=\"overlay-content py-4 px-8\">\n    <div class=\"flex mb-5\">\n      <h1><ng-content select=\"h1\"></ng-content></h1>\n      <button title=\"Close Overlay\" (click)=\"slideOut()\" class=\"ms-auto\">\n        <i class=\"fa-solid fa-x text-3xl\"></i>\n      </button>\n    </div>\n    <ng-content></ng-content>\n  </div>\n</div>\n", "import { CommonModule } from '@angular/common';\nimport { Component, EventEmitter, Input, Output, ViewChild } from '@angular/core';\nimport { SlidingOverlayComponent } from '../../../shared/sliding-overlay/sliding-overlay.component';\nimport { FormBuilder, FormGroup, ReactiveFormsModule, Validators } from '@angular/forms';\nimport { Machine } from '../../../models/machine';\nimport { DxDateBoxModule } from 'devextreme-angular';\nimport { Store } from '@ngxs/store';\nimport { AddOeeRecord } from '../../../state/machines/machines.actions';\n\n@Component({\n  selector: 'oee-entry-form',\n  standalone: true,\n  imports: [\n    CommonModule,\n    SlidingOverlayComponent,\n    ReactiveFormsModule,\n    DxDateBoxModule\n  ],\n  templateUrl: './entry-form.component.html',\n  styleUrl: './entry-form.component.scss'\n})\nexport class EntryFormComponent {\n  machine: Machine | null = null;\n\n  entryForm: FormGroup = this.fb.group({\n    run_time: [0, Validators.required],\n    planned_production_time: [0, Validators.required],\n    good_units: [0, Validators.required],\n    total_units: [0, Validators.required],\n    ideal_cycle_time: [0, Validators.required],\n    date: [new Date().toISOString(), Validators.required],\n  });\n\n  editingMode = false;\n\n  constructor(private fb: FormBuilder, private store: Store) {\n  }\n\n  @ViewChild('slidingOverlay') slidingOverlay?: SlidingOverlayComponent;\n\n  onSubmit() {\n    if (this.machine === null || this.entryForm.invalid) return;\n\n\n    this.submitEmitter.emit(this.entryForm);\n    if (!this.editingMode) {\n      this.addOeeRecord();\n    }\n  }\n\n  open(machine: Machine, data?: any) {\n    this.slidingOverlay?.slideIn();\n    this.machine = machine;\n    this.editingMode = !!data;\n    if (this.editingMode) {\n      this.entryForm.patchValue(data);\n    }\n  }\n\n  close() {\n    this.slidingOverlay?.slideOut();\n    // this.formData = {};\n    this.closeEmitter.emit();\n  }\n\n  get run_time() {\n    const val = this.entryForm.value.run_time;\n    if (!val) return null;\n    return val as number;\n  }\n\n  get planned_production_time() {\n    const val = this.entryForm.value.planned_production_time;\n    if (!val) return null;\n    return val as number;\n  }\n\n  get good_units() {\n    const val = this.entryForm.value.good_units;\n    if (!val) return null;\n    return val as number;\n  }\n\n  get total_units() {\n    const val = this.entryForm.value.total_units;\n    if (!val) return null;\n    return val as number;\n  }\n\n  get ideal_cycle_time() {\n    const val = this.entryForm.value.ideal_cycle_time;\n    if (!val) return null;\n    return val as number;\n  }\n\n  getAvailability() {\n    if (this.planned_production_time)\n      return (this.run_time ?? 0) / this.planned_production_time;\n    return null;\n  }\n\n  getQuality() {\n    if (this.total_units)\n      return (this.good_units ?? 0) / this.total_units;\n    return null;\n  }\n\n  getPerformance() {\n    if (this.run_time)\n      return (this.ideal_cycle_time ?? 0) * (this.total_units ?? 0) / this.run_time;\n    return null;\n  }\n\n  getOEE() {\n    const availability = this.getAvailability(),\n      quality = this.getQuality(),\n      performance = this.getPerformance();\n\n    if (availability === null || quality === null || performance === null)\n      return null;\n    return availability * quality * performance;\n  }\n\n  getCalculations() {\n    const dict = {\n      availability: this.getAvailability(),\n      quality: this.getQuality(),\n      performance: this.getPerformance(),\n      oee: this.getOEE()\n    };\n\n    return Object.entries(dict)\n  }\n\n  dateWithoutTimezone(date: Date) {\n    const timezone = date.getTimezoneOffset() * 60 * 1000\n    const withoutTimezone = new Date(date.getTime() - timezone);\n    return withoutTimezone\n  }\n\n  addOeeRecord() {\n    if (this.machine === null) return;\n\n    this.submitEmitter.emit(this.entryForm);\n    this.store.dispatch(new AddOeeRecord(this.machine, {\n      ...this.entryForm.value,\n      date: this.dateWithoutTimezone(new Date(this.entryForm.value.date)).toISOString()\n    })).subscribe(() => {\n      this.close();\n      this.closeEmitter.emit();\n      this.entryForm.reset();\n    });\n  }\n\n  @Output('submit') submitEmitter = new EventEmitter();\n  @Output('close') closeEmitter = new EventEmitter();\n}\n", "<oee-sliding-overlay #slidingOverlay>\n  <h1>Add Entry</h1>\n\n  <p class=\"italic mb-6\">\n    (please enter time in minutes)\n  </p>\n  <form [formGroup]=\"entryForm\" (ngSubmit)=\"onSubmit()\">\n    <div class=\"flex flex-wrap gap-3\">\n      <div>\n        <label for=\"runtime\">Run time</label>\n        <input type=\"number\" id=\"runtime\" formControlName=\"run_time\">\n      </div>\n\n      <div>\n        <label for=\"planned_time\">Planned production time</label>\n        <input type=\"number\" id=\"planned_time\" formControlName=\"planned_production_time\">\n      </div>\n\n      <div>\n        <label for=\"good_units\">Good units</label>\n        <input type=\"number\" id=\"good_units\" formControlName=\"good_units\">\n      </div>\n\n      <div>\n        <label for=\"total_units\">Total units</label>\n        <input type=\"number\" id=\"total_units\" formControlName=\"total_units\">\n      </div>\n\n      <div>\n        <label for=\"ideal_cycle_time\">Ideal cycle time</label>\n        <input type=\"number\" id=\"ideal_cycle_time\" formControlName=\"ideal_cycle_time\">\n      </div>\n    </div>\n\n    <div class=\"grid grid-cols-2 my-4\">\n      <ng-container *ngFor=\"let calculation of getCalculations()\">\n        <div class=\"font-bold text-end\">{{ calculation[0] }}:</div>\n        <div class=\"ps-3\">{{ (calculation[1] !== undefined && calculation[1] !== null) ? (calculation[1]|percent:'1.1-2') : '...' }}</div>\n      </ng-container>\n    </div>\n\n    <dx-date-box formControlName=\"date\"></dx-date-box>\n\n    <div class=\"flex justify-end mt-10\">\n      <button class=\"btn\">\n        Cancel\n      </button>\n      <button class=\"default-btn\">\n        Save\n      </button>\n    </div>\n  </form>\n</oee-sliding-overlay>\n", "import { CommonModule } from '@angular/common';\nimport { Component, Input, OnInit } from '@angular/core';\nimport { DxDataGridModule } from 'devextreme-angular';\n\n@Component({\n  selector: 'oee-entries-table',\n  standalone: true,\n  imports: [\n    CommonModule,\n    DxDataGridModule\n  ],\n  templateUrl: './entries-table.component.html',\n  styleUrl: './entries-table.component.scss'\n})\nexport class EntriesTableComponent {\n  @Input({required: true}) entries: any[] = [];\n\n  constructor() { }\n}\n", "<dx-data-grid [dataSource]=\"entries\">\n  <dxi-column dataField=\"created_at\" caption=\"Date\" dataType=\"date\"></dxi-column>\n\n  <dxi-column dataField=\"good_units\" caption=\"Good units\"></dxi-column>\n  <dxi-column dataField=\"availability\" format=\"percent\"></dxi-column>\n  <dxi-column dataField=\"performance\" format=\"percent\"></dxi-column>\n  <dxi-column dataField=\"quality\" format=\"percent\"></dxi-column>\n\n  <dxi-column dataField=\"oee\" caption=\"OEE\" format=\"percent\"></dxi-column>\n</dx-data-grid>\n"],
  "mappings": "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",
  "names": ["SlidingOverlayComponent", "constructor", "close", "EventEmitter", "show", "slideIn", "slideOut", "emit", "selectors", "outputs", "standalone", "features", "\u0275\u0275StandaloneFeature", "ngContentSelectors", "_c1", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275elementStart", "\u0275\u0275listener", "\u0275\u0275elementEnd", "\u0275\u0275projection", "\u0275\u0275element", "\u0275\u0275classProp", "CommonModule", "styles", "_SlidingOverlayComponent", "\u0275\u0275elementContainerStart", "\u0275\u0275elementStart", "\u0275\u0275text", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275textInterpolate1", "calculation_r2", "\u0275\u0275textInterpolate", "undefined", "\u0275\u0275pipeBind2", "EntryFormComponent", "constructor", "fb", "store", "machine", "entryForm", "group", "run_time", "Validators", "required", "planned_production_time", "good_units", "total_units", "ideal_cycle_time", "date", "Date", "toISOString", "editingMode", "submitEmitter", "EventEmitter", "closeEmitter", "onSubmit", "invalid", "emit", "addOeeRecord", "open", "data", "slidingOverlay", "slideIn", "patchValue", "close", "slideOut", "val", "value", "getAvailability", "getQuality", "getPerformance", "getOEE", "availability", "quality", "performance", "getCalculations", "dict", "oee", "Object", "entries", "dateWithoutTimezone", "timezone", "getTimezoneOffset", "getTime", "dispatch", "AddOeeRecord", "__spreadProps", "__spreadValues", "subscribe", "reset", "\u0275\u0275directiveInject", "FormBuilder", "Store", "selectors", "viewQuery", "rf", "ctx", "\u0275\u0275listener", "i0", "\u0275\u0275restoreView", "_r1", "\u0275\u0275resetView", "\u0275\u0275element", "\u0275\u0275template", "EntryFormComponent_ng_container_29_Template", "\u0275\u0275property", "CommonModule", "NgForOf", "PercentPipe", "SlidingOverlayComponent", "ReactiveFormsModule", "\u0275NgNoValidate", "DefaultValueAccessor", "NumberValueAccessor", "NgControlStatus", "NgControlStatusGroup", "FormGroupDirective", "FormControlName", "DxDateBoxModule", "DxDateBoxComponent", "_EntryFormComponent", "EntriesTableComponent", "constructor", "entries", "selectors", "inputs", "standalone", "features", "\u0275\u0275StandaloneFeature", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275elementStart", "\u0275\u0275element", "\u0275\u0275elementEnd", "\u0275\u0275property", "CommonModule", "DxDataGridModule", "DxDataGridComponent", "DxiColumnComponent", "_EntriesTableComponent"]
}
