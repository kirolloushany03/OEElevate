{
  "version": 3,
  "sources": ["src/app/auth/pages/sign-up/sign-up.component.ts", "src/app/auth/pages/sign-up/sign-up.component.html"],
  "sourcesContent": ["import { Component, ViewChild } from '@angular/core';\nimport { Router, RouterModule } from '@angular/router';\nimport { Store } from '@ngxs/store';\nimport { DxFormComponent, DxFormModule } from 'devextreme-angular';\nimport { Login, SignUp } from '../../state/auth.actions';\nimport { CommonModule } from '@angular/common';\n\n@Component({\n  selector: 'app-sign-up',\n  standalone: true,\n  imports: [\n    CommonModule,\n    DxFormModule,\n    RouterModule\n  ],\n  templateUrl: './sign-up.component.html',\n  styleUrl: './sign-up.component.scss'\n})\nexport class SignUpComponent {\n  @ViewChild(DxFormComponent, { static: false }) formComponent?: DxFormComponent;\n  signUpError$ = this.store.select(state => state.auth.signUpError);\n\n  signUpForm = {\n    username: '',\n    company_name: '',\n    email: '',\n    password: '',\n    confirmPassword: ''\n  };\n\n  getPassword() {\n    return this.signUpForm.password;\n  }\n\n  passwordPattern = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d).{8,}$/;\n\n  constructor(private store: Store, private router: Router) { }\n\n  onSignUp(e: any) {\n    e.preventDefault();\n    const validationGroup = this.formComponent?.instance.validate();\n\n    if (!validationGroup?.isValid)\n      return;\n\n    this.store.dispatch(new SignUp(this.signUpForm))\n  }\n}\n", "<h1 class=\"mb-4\">Sign Up </h1>\n<form (submit)=\"onSignUp($event)\" class=\"flex flex-col gap-3 w-5/6 max-w-96\">\n  <dx-form [formData]=\"signUpForm\">\n    <dxi-item dataField=\"username\">\n      <dxi-validation-rule type=\"required\" message=\"Username is required\"></dxi-validation-rule>\n      <dxi-validation-rule type=\"stringLength\" [min]=\"3\" message=\"Username must be at least 3 characters long\"></dxi-validation-rule>\n    </dxi-item>\n\n    <dxi-item dataField=\"company_name\">\n      <dxi-validation-rule type=\"required\" message=\"Company name is required\"></dxi-validation-rule>\n      <dxi-validation-rule type=\"stringLength\" [min]=\"3\" message=\"Company name must be at least 3 characters long\"></dxi-validation-rule>\n    </dxi-item>\n\n    <dxi-item dataField=\"email\">\n      <dxi-validation-rule type=\"required\" message=\"Email is required\"></dxi-validation-rule>\n      <dxi-validation-rule type=\"email\" message=\"Email is invalid\"></dxi-validation-rule>\n    </dxi-item>\n\n    <dxi-item dataField=\"password\" type=\"password\" [editorOptions]=\"{mode:'password'}\">\n      <dxi-validation-rule type=\"required\" message=\"Password is required\"></dxi-validation-rule>\n      <dxi-validation-rule type=\"pattern\" [pattern]=\"passwordPattern\" message=\"Password must contain at least 8 characters, 1 number, 1 uppercase and 1 lowercase letter\"></dxi-validation-rule>\n    </dxi-item>\n\n    <dxi-item dataField=\"confirmPassword\" type=\"password\" [editorOptions]=\"{mode:'password'}\">\n      <dxi-validation-rule type=\"required\" message=\"Password is required\"></dxi-validation-rule>\n      <dxi-validation-rule type=\"compare\" [comparisonTarget]=\"getPassword.bind(this)\" message=\"Must be the same as password\"></dxi-validation-rule>\n    </dxi-item>\n\n    <dxi-item itemType=\"button\">\n      <dxo-button-options [useSubmitBehavior]=\"true\" text=\"Log in\"></dxo-button-options>\n    </dxi-item>\n  </dx-form>\n</form>\n\n<p *ngIf=\"signUpError$ | async\" class=\"text-danger\">\n  {{ signUpError$ | async }}\n</p>\n\n<p>\n  Already have an account?\n  <a routerLink=\"/login\" class=\"text-primary\">\n    Log in\n  </a>\n</p>\n"],
  "mappings": "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",
  "names": ["\u0275\u0275elementStart", "\u0275\u0275text", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275textInterpolate1", "\u0275\u0275pipeBind1", "ctx_r0", "signUpError$", "SignUpComponent", "getPassword", "signUpForm", "password", "constructor", "store", "router", "select", "state", "auth", "signUpError", "username", "company_name", "email", "confirmPassword", "passwordPattern", "onSignUp", "e", "preventDefault", "formComponent", "instance", "validate", "isValid", "dispatch", "SignUp", "\u0275\u0275directiveInject", "Store", "Router", "selectors", "viewQuery", "rf", "ctx", "DxFormComponent", "\u0275\u0275listener", "$event", "\u0275\u0275element", "\u0275\u0275template", "SignUpComponent_p_21_Template", "\u0275\u0275property", "\u0275\u0275pureFunction0", "_c0", "bind", "CommonModule", "NgIf", "AsyncPipe", "DxFormModule", "DxiItemComponent", "DxiValidationRuleComponent", "DxoButtonOptionsComponent", "RouterModule", "RouterLink", "styles", "_SignUpComponent"]
}
