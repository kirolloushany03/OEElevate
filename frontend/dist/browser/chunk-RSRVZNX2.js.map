{
  "version": 3,
  "sources": ["src/app/machines/state/machines/machines.actions.ts", "src/environments/environment.production.ts", "src/app/services/crud/crud.service.ts", "src/app/machines/service/machine.service.ts", "src/app/machines/state/machines/machines.state.ts"],
  "sourcesContent": ["import { Machine, MachineForm } from \"../../../models/machine\";\nimport { OeeRecordForm } from \"../../../models/oee-record\";\n\nexport class AddMachine {\n  static readonly type = '[Machines] Add machine';\n  constructor(public payload: MachineForm) { }\n}\n\nexport class GetMachines {\n  static readonly type = '[Machines] Get machines';\n  constructor() { }\n}\n\nexport class GetMachineById {\n  static readonly type = '[Machines] Get machine by id';\n  constructor(public id: number) { }\n}\n\nexport class AddOeeRecord {\n  static readonly type = '[Machines] Add OEE record';\n  constructor(public machine: Machine, public payload: OeeRecordForm) { }\n}\n", "export const environment = {\n  production: true,\n  apiUrl: 'https://alihaitham.tech/api'\n}\n", "import { HttpClient, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { environment } from '../../../environments/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CrudService {\n  constructor(private http: HttpClient) { }\n\n  create(endpoint: string, body: any) {\n    return this.http.post(environment.apiUrl + endpoint, body);\n  }\n\n  read(endpoint: string, queryParams?: any) {\n    if (queryParams) {\n      let params = new HttpParams();\n      Object.keys(queryParams).forEach(key => {\n        params = params.append(key, queryParams[key]);\n      });\n      return this.http.get(environment.apiUrl + endpoint, { params });\n    }\n\n    return this.http.get(environment.apiUrl + endpoint);\n  }\n\n  update(endpoint: string, body: any) {\n    return this.http.put(environment.apiUrl + endpoint, body);\n  }\n\n  delete(endpoint: string) {\n    return this.http.delete(environment.apiUrl + endpoint);\n  }\n}\n", "import { Injectable } from '@angular/core';\nimport { CrudService } from '../../services/crud/crud.service';\nimport { Machine, MachineForm } from '../../models/machine';\nimport { OeeRecordForm } from '../../models/oee-record';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MachineService {\n\n  constructor(private crud: CrudService) { }\n\n  addMachine(machine: MachineForm) {\n    return this.crud.create('/machines', machine);\n  }\n\n  getMachines() {\n    return this.crud.read('/machines');\n  }\n\n  getMachinesSummary() {\n    return this.crud.read('/machines/summary');\n  }\n\n  getMachineById(id:number) {\n    return this.crud.read(`/machines/${id}`)\n  }\n\n  addOeeRecord(machine: Machine, data: OeeRecordForm) {\n    data.date = data.date.split('.')[0]\n    return this.crud.create(`/machine/${machine.id}/oeeRecords`, data);\n  }\n}\n", "import { Injectable } from '@angular/core';\nimport { State, Action, Selector, StateContext } from '@ngxs/store';\nimport { AddMachine, AddOeeRecord, GetMachineById, GetMachines } from './machines.actions';\nimport { Machine, MachineSummary } from '../../../models/machine';\nimport { map, tap, timer } from 'rxjs';\nimport { MachineService } from '../../service/machine.service';\nimport { log } from '../../../utlils/operators';\nimport { HttpStatusCode } from '@angular/common/http';\nimport { MaybeErorr, RequestError } from '../../../models/request-error';\n\nexport interface MachinesStateModel {\n  machines: MachineSummary[];\n  machineById: MaybeErorr<MachineSummary>;\n}\n\n@State<MachinesStateModel>({\n  name: 'machines',\n  defaults: {\n    machines: [],\n    machineById: null\n  }\n})\n@Injectable()\nexport class MachinesState {\n  constructor(private machineService: MachineService) { }\n\n  @Selector()\n  static machines(state: MachinesStateModel) {\n    return state.machines;\n  }\n\n  @Selector()\n  static machineById(state: MachinesStateModel) {\n    return state.machineById\n  }\n\n  @Action(AddMachine)\n  addMachine(ctx: StateContext<MachinesStateModel>, action: AddMachine) {\n    return this.machineService.addMachine(action.payload).pipe(\n      tap({\n        next: (machine: any) => {\n          ctx.dispatch(new GetMachines())\n        },\n        error: (error) => console.error('Error adding machine', error)\n      })\n    );\n  }\n\n  @Action(GetMachines)\n  getMachines(ctx: StateContext<MachinesStateModel>, action: GetMachines) {\n    return this.machineService.getMachinesSummary().pipe(\n      tap({\n        next: (machines: any) => {\n          ctx.patchState({ machines });\n        },\n        error: (error) => console.error('Error getting machines', error)\n      })\n    );\n  }\n\n  @Action(GetMachineById)\n  getMachineById(ctx: StateContext<MachinesStateModel>, action: GetMachineById) {\n    return this.machineService.getMachineById(action.id).pipe(\n      tap({\n        next: (machineById: any) => {\n          ctx.patchState({ machineById });\n        },\n        error: (error) => {\n          if (error.status === HttpStatusCode.NotFound) {\n            ctx.patchState({\n              machineById: {\n                error: {\n                  status: error.status,\n                  message: error.message?.length\n                    ? error.message\n                    : `Machine with id ${action.id} not found`\n                }\n              }\n            })\n          }\n        }\n      })\n    )\n  }\n\n  @Action(AddOeeRecord)\n  addOeeRecord(ctx: StateContext<MachinesStateModel>, action: AddOeeRecord) {\n    return this.machineService.addOeeRecord(action.machine, action.payload).pipe(\n      tap({\n        next: (record: any) => {\n          ctx.dispatch(new GetMachines())\n        },\n        error: (error) => console.error('Error adding OEE record', error)\n      })\n    );\n  }\n}\n"],
  "mappings": "2IAGA,IAAaA,GAAU,IAAA,CAAjB,IAAOA,EAAP,MAAOA,CAAU,CAErBC,YAAmBC,EAAoB,CAApB,KAAAA,QAAAA,CAAwB,GAD3BC,EAAAC,KAAO,yBADnB,IAAOJ,EAAPG,SAAOH,CAAU,GAAA,EAKVK,GAAW,IAAA,CAAlB,IAAOA,EAAP,MAAOA,CAAW,CAEtBJ,aAAA,CAAgB,GADAK,EAAAF,KAAO,0BADnB,IAAOC,EAAPC,SAAOD,CAAW,GAAA,EAKXE,GAAc,IAAA,CAArB,IAAOA,EAAP,MAAOA,CAAc,CAEzBN,YAAmBO,EAAU,CAAV,KAAAA,GAAAA,CAAc,GADjBC,EAAAL,KAAO,+BADnB,IAAOG,EAAPE,SAAOF,CAAc,GAAA,EAKdG,GAAY,IAAA,CAAnB,IAAOA,EAAP,MAAOA,CAAY,CAEvBT,YAAmBU,EAAyBT,EAAsB,CAA/C,KAAAS,QAAAA,EAAyB,KAAAT,QAAAA,CAA0B,GADtDU,EAAAR,KAAO,4BADnB,IAAOM,EAAPE,SAAOF,CAAY,GAAA,EClBlB,IAAMG,EAAc,CACzBC,WAAY,GACZC,OAAQ,+BCKV,IAAaC,GAAW,IAAA,CAAlB,IAAOA,EAAP,MAAOA,CAAW,CACtBC,YAAoBC,EAAgB,CAAhB,KAAAA,KAAAA,CAAoB,CAExCC,OAAOC,EAAkBC,EAAS,CAChC,OAAO,KAAKH,KAAKI,KAAKC,EAAYC,OAASJ,EAAUC,CAAI,CAC3D,CAEAI,KAAKL,EAAkBM,EAAiB,CACtC,GAAIA,EAAa,CACf,IAAIC,EAAS,IAAIC,EACjBC,cAAOC,KAAKJ,CAAW,EAAEK,QAAQC,GAAM,CACrCL,EAASA,EAAOM,OAAOD,EAAKN,EAAYM,CAAG,CAAC,CAC9C,CAAC,EACM,KAAKd,KAAKgB,IAAIX,EAAYC,OAASJ,EAAU,CAAEO,OAAAA,CAAM,CAAE,CAChE,CAEA,OAAO,KAAKT,KAAKgB,IAAIX,EAAYC,OAASJ,CAAQ,CACpD,CAEAe,OAAOf,EAAkBC,EAAS,CAChC,OAAO,KAAKH,KAAKkB,IAAIb,EAAYC,OAASJ,EAAUC,CAAI,CAC1D,CAEAgB,OAAOjB,EAAgB,CACrB,OAAO,KAAKF,KAAKmB,OAAOd,EAAYC,OAASJ,CAAQ,CACvD,yCAzBWJ,GAAWsB,EAAAC,CAAA,CAAA,CAAA,wBAAXvB,EAAWwB,QAAXxB,EAAWyB,UAAAC,WAFV,MAAM,CAAA,EAEd,IAAO1B,EAAP2B,SAAO3B,CAAW,GAAA,ECCxB,IAAa4B,GAAc,IAAA,CAArB,IAAOA,EAAP,MAAOA,CAAc,CAEzBC,YAAoBC,EAAiB,CAAjB,KAAAA,KAAAA,CAAqB,CAEzCC,WAAWC,EAAoB,CAC7B,OAAO,KAAKF,KAAKG,OAAO,YAAaD,CAAO,CAC9C,CAEAE,aAAW,CACT,OAAO,KAAKJ,KAAKK,KAAK,WAAW,CACnC,CAEAC,oBAAkB,CAChB,OAAO,KAAKN,KAAKK,KAAK,mBAAmB,CAC3C,CAEAE,eAAeC,EAAS,CACtB,OAAO,KAAKR,KAAKK,KAAK,aAAaG,CAAE,EAAE,CACzC,CAEAC,aAAaP,EAAkBQ,EAAmB,CAChDA,OAAAA,EAAKC,KAAOD,EAAKC,KAAKC,MAAM,GAAG,EAAE,CAAC,EAC3B,KAAKZ,KAAKG,OAAO,YAAYD,EAAQM,EAAE,cAAeE,CAAI,CACnE,yCAvBWZ,GAAce,EAAAC,CAAA,CAAA,CAAA,wBAAdhB,EAAciB,QAAdjB,EAAckB,UAAAC,WAFb,MAAM,CAAA,EAEd,IAAOnB,EAAPoB,SAAOpB,CAAc,GAAA,QCedqB,GAANC,EAAA,KAAmB,CACxBC,YAAoBC,EAA8B,CAA9B,KAAAA,eAAAA,CAAkC,CAG/C,OAAAC,SAASC,EAAyB,CACvC,OAAOA,EAAMD,QACf,CAGO,OAAAE,YAAYD,EAAyB,CAC1C,OAAOA,EAAMC,WACf,CAGAC,WAAWC,EAAuCC,EAAkB,CAClE,OAAO,KAAKN,eAAeI,WAAWE,EAAOC,OAAO,EAAEC,KACpDC,EAAI,CACFC,KAAOC,GAAgB,CACrBN,EAAIO,SAAS,IAAIC,CAAa,CAChC,EACAC,MAAQA,GAAUC,QAAQD,MAAM,uBAAwBA,CAAK,EAC9D,CAAC,CAEN,CAGAE,YAAYX,EAAuCC,EAAmB,CACpE,OAAO,KAAKN,eAAeiB,mBAAkB,EAAGT,KAC9CC,EAAI,CACFC,KAAOT,GAAiB,CACtBI,EAAIa,WAAW,CAAEjB,SAAAA,CAAQ,CAAE,CAC7B,EACAa,MAAQA,GAAUC,QAAQD,MAAM,yBAA0BA,CAAK,EAChE,CAAC,CAEN,CAGAK,eAAed,EAAuCC,EAAsB,CAC1E,OAAO,KAAKN,eAAemB,eAAeb,EAAOc,EAAE,EAAEZ,KACnDC,EAAI,CACFC,KAAOP,GAAoB,CACzBE,EAAIa,WAAW,CAAEf,YAAAA,CAAW,CAAE,CAChC,EACAW,MAAQA,GAAS,CACXA,EAAMO,SAAWC,EAAeC,UAClClB,EAAIa,WAAW,CACbf,YAAa,CACXW,MAAO,CACLO,OAAQP,EAAMO,OACdG,QAASV,EAAMU,SAASC,OACpBX,EAAMU,QACN,mBAAmBlB,EAAOc,EAAE,eAGrC,CAEL,EACD,CAAC,CAEN,CAGAM,aAAarB,EAAuCC,EAAoB,CACtE,OAAO,KAAKN,eAAe0B,aAAapB,EAAOK,QAASL,EAAOC,OAAO,EAAEC,KACtEC,EAAI,CACFC,KAAOiB,GAAe,CACpBtB,EAAIO,SAAS,IAAIC,CAAa,CAChC,EACAC,MAAQA,GAAUC,QAAQD,MAAM,0BAA2BA,CAAK,EACjE,CAAC,CAEN,yCAxEWjB,GAAa+B,EAAAC,CAAA,CAAA,CAAA,wBAAbhC,EAAaiC,QAAbjC,EAAakC,SAAA,CAAA,EAAnBjC,GAcLkC,EAAA,CADCC,EAAOC,CAAU,CAAC,EAAArC,EAAA,UAAA,aAAA,IAAA,EAanBmC,EAAA,CADCC,EAAOpB,CAAW,CAAC,EAAAhB,EAAA,UAAA,cAAA,IAAA,EAapBmC,EAAA,CADCC,EAAOE,CAAc,CAAC,EAAAtC,EAAA,UAAA,iBAAA,IAAA,EA0BvBmC,EAAA,CADCC,EAAOG,CAAY,CAAC,EAAAvC,EAAA,UAAA,eAAA,IAAA,EA1DdmC,EAAA,CADNK,EAAQ,CAAE,EAAAxC,EAAA,WAAA,IAAA,EAMJmC,EAAA,CADNK,EAAQ,CAAE,EAAAxC,EAAA,cAAA,IAAA,EARAA,EAAamC,EAAA,CARzBM,EAA0B,CACzBC,KAAM,WACNC,SAAU,CACRvC,SAAU,CAAA,EACVE,YAAa,MAEhB,CAAC,EAEWN,CAAa",
  "names": ["AddMachine", "constructor", "payload", "_AddMachine", "type", "GetMachines", "_GetMachines", "GetMachineById", "id", "_GetMachineById", "AddOeeRecord", "machine", "_AddOeeRecord", "environment", "production", "apiUrl", "CrudService", "constructor", "http", "create", "endpoint", "body", "post", "environment", "apiUrl", "read", "queryParams", "params", "HttpParams", "Object", "keys", "forEach", "key", "append", "get", "update", "put", "delete", "\u0275\u0275inject", "HttpClient", "factory", "\u0275fac", "providedIn", "_CrudService", "MachineService", "constructor", "crud", "addMachine", "machine", "create", "getMachines", "read", "getMachinesSummary", "getMachineById", "id", "addOeeRecord", "data", "date", "split", "\u0275\u0275inject", "CrudService", "factory", "\u0275fac", "providedIn", "_MachineService", "MachinesState", "_a", "constructor", "machineService", "machines", "state", "machineById", "addMachine", "ctx", "action", "payload", "pipe", "tap", "next", "machine", "dispatch", "GetMachines", "error", "console", "getMachines", "getMachinesSummary", "patchState", "getMachineById", "id", "status", "HttpStatusCode", "NotFound", "message", "length", "addOeeRecord", "record", "\u0275\u0275inject", "MachineService", "factory", "\u0275fac", "__decorate", "Action", "AddMachine", "GetMachineById", "AddOeeRecord", "Selector", "State", "name", "defaults"]
}
