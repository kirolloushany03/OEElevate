{
  "version": 3,
  "sources": ["src/app/dashboard/dashboard.component.ts", "src/app/dashboard/dashboard.component.html"],
  "sourcesContent": ["import { Component } from '@angular/core';\nimport { Store } from '@ngxs/store';\nimport { DxBarGaugeModule, DxChartModule } from 'devextreme-angular';\nimport { GetBadItemsRate, GetMachinesBrief, GetMachinesWithLowestOee } from './state/dashboard.actions';\nimport { DashboardState } from './state/dashboard.state';\nimport { AsyncPipe, NgFor, NgStyle, PercentPipe } from '@angular/common';\nimport { map } from 'rxjs/operators';\nimport { RouterModule } from '@angular/router';\n\n@Component({\n  selector: 'oee-dashboard',\n  standalone: true,\n  imports: [\n    AsyncPipe,\n    PercentPipe,\n    NgStyle,\n    NgFor,\n    DxBarGaugeModule,\n    DxChartModule,\n    RouterModule\n  ],\n  templateUrl: './dashboard.component.html',\n  styleUrl: './dashboard.component.scss'\n})\nexport class DashboardComponent {\n  badItemsRate$ = this.store.select(DashboardState.badItemsRate)\n  machinesWithLowestOEE$ = this.store.select(DashboardState.machinesWithLowestOee)\n\n  badItemsRateColor$ = this.badItemsRate$.pipe(\n    map(rate => rate < 0.05 ? '--success' : rate < 0.15 ? '--warning' : '--danger')\n  );\n\n  machines$ = this.store.select(DashboardState.machinesBrief);\n\n  constructor (private store: Store) {\n    this.store.dispatch(new GetBadItemsRate());\n    this.store.dispatch(new GetMachinesWithLowestOee());\n    this.store.dispatch(new GetMachinesBrief());\n  }\n}\n", "<h1 class=\"mb-4\">Dashboard <span class=\"text-md\"></span></h1>\n\n<div class=\"container-fluid\">\n  <div class=\"grid grid-cols-1 md:grid-cols-3 gap-3\">\n    <div class=\"box md:col-span-2\">\n      <h3 class=\"text-start\">Lowest {{(machinesWithLowestOEE$ | async)?.length ?? '-'}} OEE's</h3>\n\n      <dx-chart class=\"block w-full max-w-full mt-auto\" [dataSource]=\"machinesWithLowestOEE$ | async\">\n        <dxo-size [height]=\"200\"></dxo-size>\n        <dxo-legend horizontalAlignment=\"center\" verticalAlignment=\"bottom\"></dxo-legend>\n\n        <dxi-value-axis>\n          <dxo-label format=\"percent\"></dxo-label>\n        </dxi-value-axis>\n\n        <dxi-series type=\"bar\" name=\"OEE\" argumentField=\"name\" valueField=\"average_oee\"></dxi-series>\n        <dxi-series type=\"bar\" name=\"Performance\" argumentField=\"name\" valueField=\"average_performance\"></dxi-series>\n        <dxi-series type=\"bar\" name=\"Quality\" argumentField=\"name\" valueField=\"average_quality\"></dxi-series>\n        <dxi-series type=\"bar\" name=\"Availability\" argumentField=\"name\" valueField=\"average_availability\"></dxi-series>\n      </dx-chart>\n    </div>\n\n    <div class=\"box\">\n      <h3 class=\"text-center\">Percentage of bad items</h3>\n      <dx-bar-gauge class=\"block p-5 w-full max-w-full\" [relativeInnerRadius]=\"0.5\"\n                    [values]=\"[(badItemsRate$ | async) ?? 0]\" [startValue]=\"0\" [endValue]=\"1\"\n                    backgroundColor=\"var(--default-bg)\" [palette]=\"['var(' + (badItemsRateColor$ | async) + ')']\"\n                    centerTemplate=\"center\">\n        <dxo-geometry [startAngle]=\"90\" [endAngle]=\"90\"></dxo-geometry>\n        <dxo-label [visible]=\"false\" format=\"percent\"></dxo-label>\n        <dxo-size [height]=\"200\"></dxo-size>\n        <svg *dxTemplate=\"let gauge of 'center'\">\n          <text text-anchor=\"center\" y=\"50%\" [ngStyle]=\"{fill: 'var(' + (badItemsRateColor$ | async) + ')'}\"\n                font-family=\"inherit\" font-size=\"20\">\n            {{((badItemsRate$ | async) ?? 0) | percent}}\n          </text>\n        </svg>\n      </dx-bar-gauge>\n    </div>\n\n    <div class=\"box col-span-full min-h-36\">\n      <h3 class=\"w-full mb-3\">\n        Machines ({{(machines$ | async)?.length ?? '-'}}):\n      </h3>\n\n      <div class=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-6 gap-3 w-full\">\n        <a class=\"box text-center text-fg\" *ngFor=\"let machine of ((machines$ | async)?.slice(0, 20) ?? [])\"\n           [routerLink]=\"['/machines/details', machine.id]\">\n          <p class=\"font-bold\">{{machine.machine_name}}</p>\n          <p class=\"mt-auto\">id: {{machine.id}}</p>\n        </a>\n      </div>\n    </div>\n  </div>\n</div>\n"],
  "mappings": "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",
  "names": ["\u0275\u0275elementStart", "\u0275\u0275text", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275property", "\u0275\u0275pureFunction1", "_c2", "\u0275\u0275pipeBind1", "ctx_r0", "badItemsRateColor$", "\u0275\u0275textInterpolate1", "tmp_3_0", "badItemsRate$", "undefined", "_c3", "machine_r2", "id", "\u0275\u0275textInterpolate", "machine_name", "DashboardComponent", "constructor", "store", "select", "DashboardState", "badItemsRate", "machinesWithLowestOEE$", "machinesWithLowestOee", "pipe", "map", "rate", "machines$", "machinesBrief", "dispatch", "GetBadItemsRate", "GetMachinesWithLowestOee", "GetMachinesBrief", "\u0275\u0275directiveInject", "Store", "selectors", "standalone", "features", "\u0275\u0275StandaloneFeature", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275element", "\u0275\u0275template", "DashboardComponent__svg_svg_28_Template", "DashboardComponent_a_34_Template", "tmp_0_0", "length", "_c0", "tmp_4_0", "tmp_13_0", "tmp_14_0", "slice", "\u0275\u0275pureFunction0", "_c1", "AsyncPipe", "PercentPipe", "NgStyle", "NgFor", "DxBarGaugeModule", "DxBarGaugeComponent", "DxoGeometryComponent", "DxoLabelComponent", "DxoLegendComponent", "DxoSizeComponent", "DxTemplateDirective", "DxChartModule", "DxChartComponent", "DxiSeriesComponent", "DxiValueAxisComponent", "RouterModule", "RouterLink", "_DashboardComponent"]
}
