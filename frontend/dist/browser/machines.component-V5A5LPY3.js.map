{
  "version": 3,
  "sources": ["src/app/machines/machines.component.ts", "src/app/machines/machines.component.html"],
  "sourcesContent": ["import { Component, ViewChild } from '@angular/core';\nimport { Store } from '@ngxs/store';\nimport { DxDataGridModule, DxFormComponent, DxFormModule } from 'devextreme-angular';\nimport { AddMachine, GetMachines } from '../state/machines/machines.actions';\nimport { Machine, MachineForm, MachineSummary } from '../models/machine';\nimport { MachinesState } from '../state/machines/machines.state';\nimport { Observable, skip } from 'rxjs';\nimport { CommonModule } from '@angular/common';\nimport { SlidingOverlayComponent } from '../shared/sliding-overlay/sliding-overlay.component';\nimport { MachineService } from './service/machine.service';\nimport { EntriesTableComponent } from './components/entries-table/entries-table.component';\nimport { EntryFormComponent } from './components/entry-form/entry-form.component';\nimport { RouterModule } from '@angular/router';\n\n@Component({\n  selector: 'oee-machines',\n  standalone: true,\n  imports: [\n    CommonModule,\n    DxDataGridModule,\n    SlidingOverlayComponent,\n    DxFormModule,\n    EntriesTableComponent,\n    EntryFormComponent,\n    RouterModule\n  ],\n  templateUrl: './machines.component.html',\n  styleUrl: './machines.component.scss'\n})\nexport class MachinesComponent {\n  machines$: Observable<MachineSummary[]>;\n  @ViewChild('machineFormOverlay') slidingOverlay?: SlidingOverlayComponent;\n  @ViewChild('machineFormComponent') machineFormComponent?: DxFormComponent;\n  @ViewChild('entryFormComponent') entryFormComponent?: EntryFormComponent;\n\n  machineForm:MachineForm;\n\n  constructor(private store: Store) {\n    this.machines$ = this.store.select(MachinesState.machines)\n    this.store.dispatch(new GetMachines());\n    this.machineForm = {\n      machine_name: ''\n    }\n  }\n\n  openMachineForm() {\n    this.slidingOverlay?.slideIn();\n  }\n\n  resetForm() {\n    this.machineFormComponent?.instance.reset()\n  }\n\n  addMachine(event: Event) {\n    event.preventDefault();\n\n    const validation = this.machineFormComponent?.instance.validate();\n\n    if (!validation?.isValid) {\n      return;\n    }\n\n    this.store.dispatch(new AddMachine(this.machineForm)).subscribe({\n      next: () => {\n        this.slidingOverlay?.slideOut();\n        this.resetForm();\n      },\n      error: (error) => {\n      }\n    });\n  }\n\n  log(data: any) {\n    console.log('machine: ', data);\n    return data;\n  }\n\n  /* ENTRIES */\n  openEntryForm(data?: any) {\n    this.entryFormComponent?.open(data);\n  }\n}\n", "<div class=\"h-full flex flex-col\">\n  <h1 class=\"mb-5\">Machines</h1>\n\n  <div class=\"flex-1\">\n    <dx-data-grid class=\"h-full\" [dataSource]=\"machines$ | async\" [showColumnLines]=\"false\" [showRowLines]=\"false\">\n      <dxi-column dataField=\"id\" caption=\"ID\" alignment=\"start\" width=\"auto\"></dxi-column>\n      <dxi-column dataField=\"machine_name\" caption=\"Name\"></dxi-column>\n      <dxi-column dataField=\"total_good_units\" caption=\"Good Units\"></dxi-column>\n      <dxi-column dataField=\"average_availability\" caption=\"Average availability\" format=\"percent\"></dxi-column>\n      <dxi-column dataField=\"average_performance\" caption=\"Average performance\" format=\"percent\"></dxi-column>\n      <dxi-column dataField=\"average_quality\" caption=\"Average quality\" format=\"percent\"></dxi-column>\n      <dxi-column dataField=\"average_oee\" caption=\"Average OEE\" format=\"percent\"></dxi-column>\n      <dxi-column type=\"buttons\" width=\"auto\">\n        <dxi-button hint=\"Add Record\" template=\"addEntryTemplate\">\n          <button type=\"button\" title=\"Add Record\" *dxTemplate=\"let machine of 'addEntryTemplate'\" class=\"text-primary\"\n                  (click)=\"openEntryForm(machine.data)\">\n            <i class=\"fa-solid fa-plus\"></i>\n          </button>\n        </dxi-button>\n        <dxi-button hint=\"View\" template=\"viewTemplate\">\n          <a type=\"button\" title=\"Add Record\" *dxTemplate=\"let machine of 'viewTemplate'\" class=\"text-fg ms-3\" [routerLink]=\"['details/', machine?.data?.id]\">\n            <i class=\"fa-solid fa-eye\"></i>\n          </a>\n        </dxi-button>\n\n        <!-- <dxi-button hint=\"Delete\" icon=\"trash\" cssClass=\"text-danger\"></dxi-button> -->\n      </dxi-column>\n\n      <dxo-master-detail [enabled]=\"true\" template=\"LatestEntriesTemplate\">\n      </dxo-master-detail>\n      <oee-entries-table *dxTemplate=\"let machine of 'LatestEntriesTemplate'\"\n                         [entries]=\"machine?.data?.latest_entries ?? null\"></oee-entries-table>\n\n      <dxo-paging [enabled]=\"false\"></dxo-paging>\n      <dxo-load-panel [enabled]=\"false\" [showIndicator]=\"true\"></dxo-load-panel>\n    </dx-data-grid>\n  </div>\n</div>\n\n<button title=\"Add Machine\"\n        class=\"fixed bottom-6 right-10 w-14 h-auto aspect-square rounded-full bg-primary hover:rotate-180 hover:bg-primary-dark transition-all\"\n        (click)=\"openMachineForm()\">\n  <i class=\"fa-solid fa-plus text-3xl\"></i>\n</button>\n\n\n<oee-sliding-overlay #machineFormOverlay>\n  <h1>Add machine</h1>\n\n  <form (submit)=\"addMachine($event)\">\n    <dx-form [formData]=\"machineForm\" #machineFormComponent>\n      <dxi-item dataField=\"machine_name\" caption=\"Name\" [editorOptions]=\"{ placeholder: 'Name' }\">\n        <dxo-label text=\"Name\"></dxo-label>\n        <dxi-validation-rule type=\"required\" message=\"Name is required\"></dxi-validation-rule>\n        <dxi-validation-rule type=\"stringLength\" [min]=\"3\" [max]=\"30\"\n                             message=\"Name must be between 3 and 30 characters\"></dxi-validation-rule>\n      </dxi-item>\n\n      <dxi-item itemType=\"button\">\n        <dxo-button-options [useSubmitBehavior]=\"true\" text=\"Add machine\"></dxo-button-options>\n      </dxi-item>\n    </dx-form>\n  </form>\n</oee-sliding-overlay>\n\n\n<oee-entry-form #entryFormComponent></oee-entry-form>\n"],
  "mappings": "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",
  "names": ["\u0275\u0275elementStart", "\u0275\u0275listener", "machine_r3", "\u0275\u0275restoreView", "_r2", "$implicit", "ctx_r3", "\u0275\u0275nextContext", "\u0275\u0275resetView", "openEntryForm", "data", "\u0275\u0275element", "\u0275\u0275elementEnd", "\u0275\u0275property", "\u0275\u0275pureFunction1", "_c4", "machine_r5", "id", "tmp_5_0", "machine_r6", "latest_entries", "undefined", "MachinesComponent", "constructor", "store", "machines$", "select", "MachinesState", "machines", "dispatch", "GetMachines", "machineForm", "machine_name", "openMachineForm", "slidingOverlay", "slideIn", "resetForm", "machineFormComponent", "instance", "reset", "addMachine", "event", "preventDefault", "validate", "isValid", "AddMachine", "subscribe", "next", "slideOut", "error", "log", "console", "entryFormComponent", "open", "\u0275\u0275directiveInject", "Store", "selectors", "viewQuery", "rf", "ctx", "\u0275\u0275text", "\u0275\u0275template", "MachinesComponent_button_15_Template", "MachinesComponent_a_17_Template", "MachinesComponent_oee_entries_table_19_Template", "i0", "_r1", "$event", "\u0275\u0275advance", "\u0275\u0275pipeBind1", "\u0275\u0275pureFunction0", "_c3", "CommonModule", "AsyncPipe", "DxDataGridModule", "DxDataGridComponent", "DxiColumnComponent", "DxiButtonComponent", "DxoLabelComponent", "DxiValidationRuleComponent", "DxiItemComponent", "DxoButtonOptionsComponent", "DxoLoadPanelComponent", "DxoMasterDetailComponent", "DxoPagingComponent", "DxTemplateDirective", "SlidingOverlayComponent", "DxFormModule", "DxFormComponent", "EntriesTableComponent", "EntryFormComponent", "RouterModule", "RouterLink", "_MachinesComponent"]
}
