{
  "version": 3,
  "sources": ["src/app/utlils/operators.ts", "src/app/auth/service/auth.service.ts", "src/app/auth/state/auth.state.ts", "src/app/auth/logged-in.guard.ts", "src/app/layout/side-menu/side-menu.component.ts", "src/app/layout/side-menu/side-menu.component.html", "src/app/layout/layout.component.ts", "src/app/layout/layout.component.html", "src/app/app.routes.ts", "src/app/state/ui/ui.state.ts", "src/app/interceptors/auth.interceptor.ts", "src/app/app.config.ts", "src/app/app.component.ts", "src/app/app.component.html", "src/main.ts"],
  "sourcesContent": ["import { tap } from \"rxjs\";\n\nexport const log = (message:string, transform?:(val:any) => string) => tap({\n    next: (val) => console.log(message, transform ? transform(val) : val),\n    error: (err) => console.error(message, err)\n})\n\nexport const storeLocally = (key:string) => tap({\n    next: (data:any) => localStorage.setItem(key, JSON.stringify(data)),\n    error: () => localStorage.removeItem(key)\n})\n", "import { Injectable } from '@angular/core';\nimport { CrudService } from '../../services/crud/crud.service';\nimport { LoginCredentials, SignUpCredentials } from '../../models/auth';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n\n  constructor(private crud:CrudService) { }\n\n  register(payload: SignUpCredentials) {\n    return this.crud.create('/auth/register', payload);\n  }\n\n  login(payload: LoginCredentials) {\n    return this.crud.create('/auth/login', payload);\n  }\n\n  getUserInfo() {\n    return this.crud.read('/user');\n  }\n}\n", "import { Injectable } from '@angular/core';\nimport { State, Selector, Action, StateContext } from '@ngxs/store';\nimport { GetUserInfo, Login, Logout, SignUp } from './auth.actions';\nimport { AuthService } from '../service/auth.service';\nimport { Router } from '@angular/router';\nimport { catchError, map, tap } from 'rxjs';\nimport { storeLocally } from '../../utlils/operators';\n\nexport interface AuthStateModel {\n    token: string | null;\n    loggedIn: boolean | null;\n    userInfo: any;\n    signUpError: string | null;\n    loginError: string | null;\n}\n\n@State<AuthStateModel>({\n    name: 'auth',\n    defaults: {\n        token: null,\n        loggedIn: null,\n        userInfo: null,\n        signUpError: null,\n        loginError: null\n    }\n})\n@Injectable()\nexport class AuthState {\n    constructor (private authService: AuthService, private router: Router) {}\n\n    @Selector()\n    static isLoggedIn(state: AuthStateModel) {\n        return state?.loggedIn;\n    }\n\n    @Action(Login)\n    login({ patchState }: StateContext<AuthStateModel>, { payload }: Login) {\n        return this.authService.login(payload).pipe(\n            map((res:any) => res['access_token']),\n            storeLocally('token'),\n            tap({\n                next: (access_token:any) => {\n                    patchState({\n                        token: access_token,\n                        loggedIn: true,\n                        loginError: null\n                    });\n                    this.router.navigate(['/']);\n                },\n                error: error => patchState({\n                    loginError: error.error\n                })\n            })\n        );\n    }\n\n    @Action(GetUserInfo)\n    getUserInfo({ patchState, dispatch }: StateContext<AuthStateModel>) {\n        patchState({\n            token: localStorage.getItem('token'),\n        })\n\n        return this.authService.getUserInfo().pipe(\n            tap({\n                next: (userInfo) => {\n                    patchState({\n                        userInfo,\n                        loggedIn: true\n                    });\n                },\n                error: (error: any) => {\n                    patchState({\n                        token: null,\n                        loggedIn: false\n                    });\n                    dispatch(new Logout());\n                }\n            }),\n        );\n    }\n\n    @Action(SignUp)\n    signUp({ patchState }: StateContext<AuthStateModel>, {payload}: SignUp) {\n        return this.authService.register(payload).pipe(\n            tap({\n                next: () => {\n                    patchState({\n                        signUpError: null\n                    });\n                    this.router.navigate(['/']);\n                },\n                error: (error) => {\n                    patchState({\n                        signUpError: error.error\n                    });\n                }\n            })\n        );\n    }\n\n    @Action(Logout)\n    logout({ patchState, getState }: StateContext<AuthStateModel>) {\n        patchState({\n            token: null,\n            loggedIn: false,\n        });\n        localStorage.removeItem('token');\n    }\n}\n", "import { inject } from '@angular/core';\nimport { CanActivateFn, Router } from '@angular/router';\nimport { Store } from '@ngxs/store';\nimport { AuthState } from './state/auth.state';\nimport { filter, map, skip, take } from 'rxjs/operators';\nimport { Logout } from './state/auth.actions';\nimport { log } from '../utlils/operators';\n\n\nexport const loggedInGuard: CanActivateFn = (route, state) => {\n  const store = inject(Store);\n  const router = inject(Router);\n  return store.select(AuthState.isLoggedIn).pipe(\n    filter(loggedIn => loggedIn !== null), // Skip the initial null value\n    take(1),\n    map(loggedIn => {\n      if (!loggedIn) {\n        return router.parseUrl('/login');\n      }\n      return true;\n    })\n  );\n};\n\nexport const loggedOutGuard: CanActivateFn = (route, state) => {\n  const store = inject(Store);\n  const router = inject(Router);\n  return store.select(AuthState.isLoggedIn).pipe(\n    filter(loggedIn => loggedIn !== null), // Skip the initial null value\n    take(1),\n    map(loggedIn => {\n      if (loggedIn) {\n        return router.parseUrl('/dashboard');\n      }\n      return true;\n    })\n  );\n}\n", "import { CommonModule } from '@angular/common';\nimport { Component } from '@angular/core';\nimport { Router, RouterModule } from '@angular/router';\nimport { Store } from '@ngxs/store';\nimport { Logout } from '../../auth/state/auth.actions';\n\n@Component({\n  selector: 'app-side-menu',\n  standalone: true,\n  imports: [\n    CommonModule,\n    RouterModule\n  ],\n  templateUrl: './side-menu.component.html',\n  styleUrl: './side-menu.component.scss'\n})\nexport class SideMenuComponent {\n  constructor(private store: Store, private router: Router) { }\n\n  items = [\n    {\n      title: 'Dashboard',\n      icon: 'fa-chart-line',\n      link: '/dashboard'\n    },\n    {\n    title: 'Machines',\n      icon: 'fa-grip',\n      link: '/machines'\n    },\n    {\n      title: 'Profile',\n      icon: 'fa-user',\n      link: '/profile'\n    },\n    {\n      title: 'Settings',\n      icon: 'fa-gear',\n      link: '/settings'\n    }\n  ]\n\n  logout() {\n    this.store.dispatch(new Logout()).subscribe(() => {\n      console.log(\"Logged out, redirecting to login page\")\n      this.router.navigate(['/login'])\n    });\n  }\n}\n", "<nav class=\"sidebar h-full border-r border-muted\">\n  <ul class=\"flex flex-col h-full justify-center gap-3 px-8 bg-bg\">\n    <li class=\"\" *ngFor=\"let item of items\">\n      <a class=\"nav-link text-lg text-muted\" [routerLink]=\"item.link\" routerLinkActive=\"text-primary\">\n        <i class=\"me-3 text-2xl fa-solid {{item.icon}}\"></i>\n        {{item.title}}\n      </a>\n    </li>\n    <li>\n      <button class=\"nav-link text-lg text-danger\" (click)=\"logout()\">\n        <i class=\"me-3 text-2xl fa-solid fa-sign-out-alt\"></i>\n        Logout\n      </button>\n    </li>\n  </ul>\n</nav>\n", "import { Component } from '@angular/core';\nimport { SideMenuComponent } from './side-menu/side-menu.component';\nimport { RouterOutlet } from '@angular/router';\n\n@Component({\n  selector: 'app-layout',\n  standalone: true,\n  imports: [\n    SideMenuComponent,\n    RouterOutlet\n  ],\n  templateUrl: './layout.component.html',\n  styleUrl: './layout.component.scss'\n})\nexport class LayoutComponent {\n}\n", "<div class=\"layout-grid\">\n  <app-side-menu [style.grid-area]=\"'sidebar'\"></app-side-menu>\n  <main [style.grid-area]=\"'main'\" class=\"overflow-auto\">\n    <div class=\"px-8 py-5\">\n      <router-outlet></router-outlet>\n    </div>\n  </main>\n</div>\n", "import { Routes } from '@angular/router';\nimport { loggedInGuard, loggedOutGuard } from './auth/logged-in.guard';\nimport { LayoutComponent } from './layout/layout.component';\n\nexport const routes: Routes = [\n  {\n    path: '',\n    pathMatch: 'full',\n    redirectTo: 'dashboard',\n  },\n  {\n    path: '',\n    children: [\n      {\n        path: 'login',\n        loadComponent: () => import('./auth/pages/login/login.component').then(m => m.LoginComponent)\n      },\n      {\n        path: 'sign-up',\n        loadComponent: () => import('./auth/pages/sign-up/sign-up.component').then(m => m.SignUpComponent)\n      }\n    ],\n    canActivate: [loggedOutGuard]\n  },\n  {\n    path: '',\n    component: LayoutComponent,\n    children: [\n      {\n        path: 'dashboard',\n        pathMatch: 'full',\n        loadComponent: () => import('./dashboard/dashboard.component').then(m => m.DashboardComponent)\n      },\n      {\n        path: 'machines',\n        children: [\n          {\n            path:'details/:id',\n            loadComponent: () => import('./machines/pages/machine-details/machine-details.component').then(m => m.MachineDetailsComponent)\n          },\n          {\n            path: '',\n            loadComponent: () => import('./machines/machines.component').then(m => m.MachinesComponent),\n          }\n        ]\n      }\n    ],\n    canActivate: [loggedInGuard],\n  },\n];\n", "import { Injectable } from '@angular/core';\nimport { State, Selector } from '@ngxs/store';\n\nexport interface UiStateModel {\n    items: string[];\n}\n\n@State<UiStateModel>({\n    name: 'ui',\n    defaults: {\n        items: []\n    }\n})\n@Injectable()\nexport class UiState {\n\n    @Selector()\n    static getState(state: UiStateModel) {\n        return state;\n    }\n\n}\n", "import { HttpInterceptorFn } from '@angular/common/http';\nimport { inject } from '@angular/core';\nimport { Store } from '@ngxs/store';\nimport { catchError, of, tap } from 'rxjs';\nimport { Logout } from '../auth/state/auth.actions';\nimport { Router } from '@angular/router';\n\nexport const authInterceptor: HttpInterceptorFn = (req, next) => {\n  const token = localStorage.getItem('token');\n  const store = inject(Store);\n  const router = inject(Router);\n\n  if (token) {\n    req = req.clone({\n      setHeaders: {\n        Authorization: `Bearer ${JSON.parse(token)}`\n      }\n    });\n  }\n\n  return next(req).pipe(\n    tap({\n      error: (error) => {\n        if (error.status === 401) {\n          store.dispatch(new Logout());\n          console.log('(UNAUTHORIZED) Logging out due to 401 error');\n        }\n      }\n    })\n  );\n};\n", "import { ApplicationConfig } from '@angular/core';\nimport { provideRouter } from '@angular/router';\n\nimport { routes } from './app.routes';\nimport { provideStore } from '@ngxs/store';\nimport { AuthState } from './auth/state/auth.state';\nimport { UiState } from './state/ui/ui.state';\nimport { MachinesState } from './machines/state/machines/machines.state';\nimport { provideHttpClient, withInterceptors } from '@angular/common/http';\nimport { authInterceptor } from './interceptors/auth.interceptor';\n\nexport const appConfig: ApplicationConfig = {\n  providers: [\n    provideRouter(routes),\n    provideStore([AuthState, UiState, MachinesState]),\n    provideHttpClient(\n      withInterceptors([authInterceptor])\n    )\n  ]\n};\n", "import { Component, OnInit } from '@angular/core';\nimport { RouterOutlet } from '@angular/router';\nimport { Store } from '@ngxs/store';\nimport TextBox, { Properties as TextBoxProperties } from 'devextreme/ui/text_box';\nimport { GetUserInfo } from './auth/state/auth.actions';\n\n@Component({\n  selector: 'app-root',\n  standalone: true,\n  imports: [RouterOutlet],\n  templateUrl: './app.component.html',\n  styleUrl: './app.component.scss',\n})\nexport class AppComponent {\n  constructor(private store: Store) {\n    const devicesConfig = [\n      { deviceType: 'desktop' as const },\n      { deviceType: 'tablet' as const },\n      { deviceType: 'phone' as const },\n    ];\n\n    devicesConfig.forEach(deviceConfig => {\n      TextBox.defaultOptions<TextBoxProperties>({\n        device: deviceConfig,\n        options: {\n          validationMessageMode: 'always',\n          valueChangeEvent: 'change'\n        }\n      });\n    });\n\n    this.store.dispatch(new GetUserInfo())\n  }\n}\n", "<div id=\"wrapper\" class=\"dark\">\n  <router-outlet></router-outlet>\n</div>\n", "import { bootstrapApplication } from '@angular/platform-browser';\nimport { appConfig } from './app/app.config';\nimport { AppComponent } from './app/app.component';\n\nbootstrapApplication(AppComponent, appConfig)\n  .catch((err) => console.error(err));\n"],
  "mappings": "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",
  "names": ["storeLocally", "key", "tap", "next", "data", "localStorage", "setItem", "JSON", "stringify", "error", "removeItem", "AuthService", "constructor", "crud", "register", "payload", "create", "login", "getUserInfo", "read", "\u0275\u0275inject", "CrudService", "factory", "\u0275fac", "providedIn", "_AuthService", "AuthState", "_a", "constructor", "authService", "router", "isLoggedIn", "state", "loggedIn", "login", "patchState", "payload", "pipe", "map", "res", "storeLocally", "tap", "next", "access_token", "token", "loginError", "navigate", "error", "getUserInfo", "dispatch", "localStorage", "getItem", "userInfo", "Logout", "signUp", "register", "signUpError", "logout", "getState", "removeItem", "\u0275\u0275inject", "AuthService", "Router", "factory", "\u0275fac", "__decorate", "Action", "Login", "GetUserInfo", "SignUp", "Selector", "State", "name", "defaults", "loggedInGuard", "route", "state", "store", "inject", "Store", "router", "Router", "select", "AuthState", "isLoggedIn", "pipe", "filter", "loggedIn", "take", "map", "parseUrl", "loggedOutGuard", "\u0275\u0275elementStart", "\u0275\u0275element", "\u0275\u0275text", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275property", "item_r1", "link", "\u0275\u0275classMapInterpolate1", "icon", "\u0275\u0275textInterpolate1", "title", "SideMenuComponent", "constructor", "store", "router", "items", "logout", "dispatch", "Logout", "subscribe", "console", "log", "navigate", "\u0275\u0275directiveInject", "Store", "Router", "selectors", "standalone", "features", "\u0275\u0275StandaloneFeature", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275template", "SideMenuComponent_li_2_Template", "\u0275\u0275listener", "CommonModule", "NgForOf", "RouterModule", "RouterLink", "RouterLinkActive", "_SideMenuComponent", "LayoutComponent", "selectors", "standalone", "features", "\u0275\u0275StandaloneFeature", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275elementStart", "\u0275\u0275element", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275styleProp", "SideMenuComponent", "RouterOutlet", "styles", "_LayoutComponent", "routes", "path", "pathMatch", "redirectTo", "children", "loadComponent", "then", "m", "LoginComponent", "SignUpComponent", "canActivate", "loggedOutGuard", "component", "LayoutComponent", "DashboardComponent", "MachineDetailsComponent", "MachinesComponent", "loggedInGuard", "UiState", "_a", "getState", "state", "factory", "\u0275fac", "__decorate", "Selector", "State", "name", "defaults", "items", "authInterceptor", "req", "next", "token", "localStorage", "getItem", "store", "inject", "Store", "router", "Router", "clone", "setHeaders", "Authorization", "JSON", "parse", "pipe", "tap", "error", "status", "dispatch", "Logout", "console", "log", "appConfig", "providers", "provideRouter", "routes", "provideStore", "AuthState", "UiState", "MachinesState", "provideHttpClient", "withInterceptors", "authInterceptor", "AppComponent", "constructor", "store", "deviceType", "forEach", "deviceConfig", "TextBox", "defaultOptions", "device", "options", "validationMessageMode", "valueChangeEvent", "dispatch", "GetUserInfo", "\u0275\u0275directiveInject", "Store", "selectors", "standalone", "features", "\u0275\u0275StandaloneFeature", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275elementStart", "\u0275\u0275element", "\u0275\u0275elementEnd", "RouterOutlet", "_AppComponent", "bootstrapApplication", "AppComponent", "appConfig", "catch", "err", "console", "error"]
}
